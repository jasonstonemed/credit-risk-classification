# README for Credit Risk Classification Project

This project aims to build supervised machine learning models to predict credit risk. The data provides information on loan size, interest rate, borrower income, debt to income ratio, number of accounts, derogatory marks, and loan status. Loan status is designated by ‘0’ (low risk) and ‘1’ (high risk). The goal is to predict loan risk using machine learning techniques.

## Installation

The script starts by importing the necessary modules:

```python
import numpy as np
import pandas as pd
from pathlib import Path
from sklearn.metrics import balanced_accuracy_score, confusion_matrix, classification_report
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from imblearn.over_sampling import RandomOverSampler
from sklearn.preprocessing import StandardScaler
import hvplot.pandas
```

You can install these dependencies using pip:

```bash
pip install NumPy pandas scikit-learn matplotlib
```

## Data

The dataset used for this project is stored in the `Resources’ folder. It consists of a CSV file named `lending_data’:

```python
data = Path('Resources/lending_data.csv')
df = pd.read_csv(data)
```

The file contains the following columns, in order:

1. Loan Size: The size of the loan in whole US dollars.
2. Interest Rate: The interest rate for the loan in percent.
3. Borrower Income: The annual income of the borrower in whole US dollars.
4. Debt to Income Ratio: The borrower's monthly debt divided by gross monthly income.
5. Number of Accounts: The number of credit and revolving credit accounts the borrower has.
6. Derogatory Marks: Negative marks on the borrower's credit report, such as late payments or bankruptcies.
7. Loan Status: The risk status of the loan. '0' is labeled low-risk and '1' is labeled high-risk.

## Data Pre-processing

Prior to model training, we perform the following data pre-processing steps:

- Handling missing values: not necessary; code was curated for class use
- Encoding categorical variables: All values were numerical
- Splitting the data: We split the dataset into training and testing sets to evaluate the model's performance.

## Model Training

Two supervised machine learning models were created. 

The first model was using the LogisticRegression method on the original data:

```python
regression = LogisticRegression(solver= 'lbfgs', random_state=1)
regression.fit(X_train, y_train)
```

Predictions are made using the testing data:

```python
y_prediction = regression.predict(X_test)
```

The balanced accuracy score, confusion matrix, and classification report are then generated for these predictions:

```python
y_pred_accur_score= balanced_accuracy_score(y_test, y_prediction)
matrix = confusion_matrix(y_test, y_prediction)
report = classification_report(y_test, y_prediction)
```

The data was then resampled using RandomOverSampler to balance the data, then created a second LogisticRegression model:

```python
oversampler = RandomOverSampler(random_state=1)
X_resampled, y_resampled = oversampler.fit_resample(X_train, y_train)
```

A new Logistic Regression model is created and fitted using the resampled training data:

```python
model = LogisticRegression(solver= 'lbfgs', random_state=1)
model.fit(X_resampled, y_resampled)
```

Predictions are again made using the testing data:

```python
prediction = model.predict(X_test)
```

Finally, the balanced accuracy score, confusion matrix, and classification report are generated for the new predictions:

```python
balanced_accuracy = balanced_accuracy_score(y_test, prediction)
matrix =confusion_matrix(y_test, prediction)
report = classification_report(y_test, prediction)
```

## Results and Visualizations

Model 1: At 0.99% accuracy, the linear regression model demonstrates to be an accurate model when predicting high-risk loans; balanced accuracy was 0.95. The classification report looks excellent at 1.00 Precision and 0.99 Recall. In sum, the model appears to be an excellent predictor of high-risk loan categories. 

Model 2: After balancing the data and completing another linear regression, all numbers were identical to the first model in the classification report and balanced average. This, too, appears to be an excellent model.

It is noted, however, that the two models produced different rates of false positive and false negative which could be used to make a final determination in which model to employ. Model 1 demonstrated more false negative and Model 2 returned more false positives.

The best model would be determined by the end user's risk tolerance to false positive or false negative results.

Credit to Phind.com for assistance with the README

Credit to Phind.com for assistance with the README
